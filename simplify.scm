(define (simplify expr)
	(cond	((number? expr)
		  				expr)
		    ((symbol? expr)
		  	  	  		expr)
			((= (length expr) 3)
				(cond ((and (equal? (second expr) '+) (equal? (simplify (first expr)) 0))
	  		  		  		(simplify (third expr)))
			  		  ((and (equal? (second expr) '+) (equal? (simplify (third expr)) 0))
			  		  		(simplify (first expr)))
			  	  	  ((and (equal? (second expr) '*) (equal? (simplify (first expr)) 0))
			  	  			0)				
			  	      ((and (equal? (second expr) '*) (equal? (simplify (third expr)) 0))
			  	  			0)
			  	  	  ((and (equal? (second expr) '*) (equal? (simplify (first expr)) 1))
			  	  	  		(simplify (third expr)))
			  	      ((and (equal? (second expr) '*) (equal? (simplify (third expr)) 1))
			  	  	  		(simplify (first expr)))
			  	  	  ((and (equal? (second expr) '-) 
					        (equal? (simplify (third expr)) 
									(simplify (first expr))))
			  	  	  		0)
			  	      ((and (equal? (second expr) '-) (equal? (simplify (third expr)) 0))
			  	  	  		(simplify (first expr)))			
			  	  	  ((and (equal? (second expr) '**) (equal? (simplify (third expr)) 0))
			  	  	  		1)
			  	      ((and (equal? (second expr) '**) (equal? (simplify (third expr)) 1))
			  	  	  		(simplify (first expr)))
			  	      ((and (equal? (second expr) '**) (equal? (simplify (first expr)) 1))
			  	  	  		1)
					  (else
					  	;from course notes http://www.cs.sfu.ca/CourseCentral/383/tjd/scheme-intro.html
							(cons (simplify (first expr)) 
								  (cons (cadr expr) 
								  		(cons (simplify (last expr)) '()
										) 
								  )
							)
					  )
				)
		  )
		  ((= (length expr) 2)
		  	  (cond ((and (equal? (first expr) 'inc) (number? (second expr)))
	  	  								(+ (second expr) 1))
	      	  		((and (equal? (first expr) 'dec) (number? (second expr)))
	  	  								(- (second expr) 1))
    		  )
		  )
		  (else
	  	  		expr)
	)
)